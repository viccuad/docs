"use strict";(self.webpackChunkkubewarden_docusaurus=self.webpackChunkkubewarden_docusaurus||[]).push([[2606],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),g=a,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||i;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},99624:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_label:"Creating a policy",title:"Creating a policy",description:"Creating a Kubewarden policy using Rust.",keywords:["kubewarden","kubernetes","policy creation"],"doc-type":["tutorial"],"doc-topic":["kubewarden","writing-policies","rust","creating-policies"],"doc-persona":["kubewarden-developer","kubewarden-developer-rust"]},o=void 0,l={unversionedId:"writing-policies/rust/create-policy",id:"writing-policies/rust/create-policy",title:"Creating a policy",description:"Creating a Kubewarden policy using Rust.",source:"@site/docs/writing-policies/rust/02-create-policy.md",sourceDirName:"writing-policies/rust",slug:"/writing-policies/rust/create-policy",permalink:"/next/writing-policies/rust/create-policy",draft:!1,editUrl:"https://github.com/kubewarden/docs/edit/main/docs/writing-policies/rust/02-create-policy.md",tags:[],version:"current",lastUpdatedAt:1701174300,formattedLastUpdatedAt:"Nov 28, 2023",sidebarPosition:2,frontMatter:{sidebar_label:"Creating a policy",title:"Creating a policy",description:"Creating a Kubewarden policy using Rust.",keywords:["kubewarden","kubernetes","policy creation"],"doc-type":["tutorial"],"doc-topic":["kubewarden","writing-policies","rust","creating-policies"],"doc-persona":["kubewarden-developer","kubewarden-developer-rust"]},sidebar:"docs",previous:{title:"Rust",permalink:"/next/writing-policies/rust/intro-rust"},next:{title:"Defining policy settings",permalink:"/next/writing-policies/rust/define-policy-settings"}},s={},c=[{value:"Scaffolding the new policy project",id:"scaffolding-the-new-policy-project",level:2},{value:"Testing",id:"testing",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"As an example, you create a simple validation policy that processes Pod creation requests."),(0,a.kt)("p",null,"The policy looks at the ",(0,a.kt)("inlineCode",{parentName:"p"},"metadata.name")," attribute of the Pod and rejects pods having an invalid name.\nIt's list of invalid names should be configurable by end users of the policy."),(0,a.kt)("p",null,"The policy settings look something like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"invalid_names:\n- bad_name1\n- bad_name2\n")),(0,a.kt)("p",null,"The policy should accept the creation of a Pod like the following one:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n// highlight-next-line\n  name: nginx\nspec:\n  containers:\n    - name: nginx\n      image: nginx:latest\n")),(0,a.kt)("p",null,"It should reject the creation of a Pod like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n// highlight-next-line\n  name: bad_name1\nspec:\n  containers:\n    - name: nginx\n      image: nginx:latest\n")),(0,a.kt)("h2",{id:"scaffolding-the-new-policy-project"},"Scaffolding the new policy project"),(0,a.kt)("p",null,"You can create a new policy project by using ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo generate")," with the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubewarden/rust-policy-template"},"template project"),"."),(0,a.kt)("p",null,"First, install ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo-generate"),". This requires ",(0,a.kt)("a",{parentName:"p",href:"https://pkgs.org/download/openssl-devel"},"openssl-devel"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cargo install cargo-generate\n")),(0,a.kt)("p",null,"Now scaffold the project as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cargo generate --git https://github.com/kubewarden/rust-policy-template \\\n               --branch main \\\n               --name demo\n")),(0,a.kt)("p",null,"The command produces output like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"\ud83d\udd27   Creating project called `demo`...\n\u2728   Done! New project created /<some-path-name>/demo\n")),(0,a.kt)("p",null,"This creates the new policy project in the ",(0,a.kt)("inlineCode",{parentName:"p"},"demo")," sub-directory."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If you plan to make use of the GitHub container registry functionality in the demo, you need to\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/packages/working-with-a-github-packages-registry/enabling-improved-container-support-with-the-container-registry#enabling-the-container-registry-for-your-personal-account"},"enable improved container support"),".")),(0,a.kt)("h3",{id:"testing"},"Testing"),(0,a.kt)("p",null,"You can try:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"cargo test\n")),(0,a.kt)("p",null,"This tests the generated scaffolding. If everything is correctly in place you'll see a series of compilation messages ending with output like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"running 4 tests\ntest settings::tests::validate_settings ... ok\ntest tests::accept_request_with_non_pod_resource ... ok\ntest tests::accept_pod_with_valid_name ... ok\ntest tests::reject_pod_with_invalid_name ... ok\n\ntest result: ok. 4 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n")))}d.isMDXComponent=!0}}]);