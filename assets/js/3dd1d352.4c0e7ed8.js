"use strict";(self.webpackChunkkubewarden_docusaurus=self.webpackChunkkubewarden_docusaurus||[]).push([[7743],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,g=d["".concat(u,".").concat(m)]||d[m]||s[m]||l;return n?r.createElement(g,a(a({ref:t},c),{},{components:n})):r.createElement(g,a({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,a=new Array(l);a[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var p=2;p<l;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6706:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return s}});var r=n(3117),i=n(102),l=(n(7294),n(3905)),a=["components"],o={sidebar_label:"Build and Run",title:""},u="Build and run",p={unversionedId:"writing-policies/rego/open-policy-agent/build-and-run",id:"writing-policies/rego/open-policy-agent/build-and-run",title:"",description:"In the previous section we have written our Rego policy. The structure",source:"@site/docs/writing-policies/rego/open-policy-agent/03-build-and-run.md",sourceDirName:"writing-policies/rego/open-policy-agent",slug:"/writing-policies/rego/open-policy-agent/build-and-run",permalink:"/writing-policies/rego/open-policy-agent/build-and-run",editUrl:"https://github.com/kubewarden/docs/edit/main/docs/writing-policies/rego/open-policy-agent/03-build-and-run.md",tags:[],version:"current",lastUpdatedAt:1654161587,formattedLastUpdatedAt:"6/2/2022",sidebarPosition:3,frontMatter:{sidebar_label:"Build and Run",title:""},sidebar:"docs",previous:{title:"Create a New Policy",permalink:"/writing-policies/rego/open-policy-agent/create-policy"},next:{title:"Distribute",permalink:"/writing-policies/rego/open-policy-agent/distribute"}},c={},s=[{value:"Build",id:"build",level:2},{value:"Run",id:"run",level:2}],d={toc:s};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"build-and-run"},"Build and run"),(0,l.kt)("p",null,"In the previous section we have written our Rego policy. The structure\nlooks as the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 data\n\u2502\xa0\xa0 \u251c\u2500\u2500 default-ns.json\n\u2502\xa0\xa0 \u2514\u2500\u2500 other-ns.json\n\u251c\u2500\u2500 policy.rego\n\u2514\u2500\u2500 request.rego\n\n1 directory, 4 files\n")),(0,l.kt)("h2",{id:"build"},"Build"),(0,l.kt)("p",null,"We have our policy, now let's go ahead and build it. We do:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ opa build -t wasm -e policy/main policy.rego request.rego\n")),(0,l.kt)("p",null,"What this does is build the rego policy, with:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"target"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"wasm"),". We want  to build the policy for the ",(0,l.kt)("inlineCode",{parentName:"li"},"wasm")," target."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"entrypoint"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"policy/main"),". The entry point is the ",(0,l.kt)("inlineCode",{parentName:"li"},"main")," rule\ninside the ",(0,l.kt)("inlineCode",{parentName:"li"},"policy")," package."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"policy.rego"),": build and include the ",(0,l.kt)("inlineCode",{parentName:"li"},"policy.rego")," file."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"request.rego"),": build and include the ",(0,l.kt)("inlineCode",{parentName:"li"},"request.rego")," file.")),(0,l.kt)("p",null,"After the build is complete, ",(0,l.kt)("inlineCode",{parentName:"p"},"opa build")," will have generated a\n",(0,l.kt)("inlineCode",{parentName:"p"},"bundle.tar.gz")," file. You can extract it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ tar -xf bundle.tar.gz /policy.wasm\n")),(0,l.kt)("p",null,"Now the tree looks like the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},".\n\u251c\u2500\u2500 bundle.tar.gz\n\u251c\u2500\u2500 data\n\u2502\xa0\xa0 \u251c\u2500\u2500 default-ns.json\n\u2502\xa0\xa0 \u2514\u2500\u2500 other-ns.json\n\u251c\u2500\u2500 policy.rego\n\u251c\u2500\u2500 policy.wasm\n\u2514\u2500\u2500 request.rego\n\n1 directory, 6 file\n")),(0,l.kt)("p",null,"We have our precious ",(0,l.kt)("inlineCode",{parentName:"p"},"policy.wasm")," file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ file policy.wasm\npolicy.wasm: WebAssembly (wasm) binary module version 0x1 (MVP)\n")),(0,l.kt)("p",null,"Now it's time to execute it! Let's go on."),(0,l.kt)("h2",{id:"run"},"Run"),(0,l.kt)("p",null,"We are going to use ",(0,l.kt)("inlineCode",{parentName:"p"},"kwctl")," in order to run the policy:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'$ kwctl run -e opa --request-path data/other-ns.json policy.wasm | jq\n{\n  "uid": "1299d386-525b-4032-98ae-1949f69f9cfc",\n  "allowed": true\n}\n')),(0,l.kt)("p",null,"This request is accepted by the policy, since this is the request\npointing to the ",(0,l.kt)("inlineCode",{parentName:"p"},"other")," namespace."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"execution-mode"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"opa"),". Rego policies can be targeting Open Policy\nAgent or Gatekeeper: we must tell ",(0,l.kt)("inlineCode",{parentName:"li"},"kwctl")," what kind of policy we are\nrunning.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"request-path"),": the location of the recorded request ",(0,l.kt)("inlineCode",{parentName:"li"},"kwctl")," will\nsend to the policy to evaluate.")),(0,l.kt)("p",null,"Now let's try to evaluate the request that creates the pod inside the\n",(0,l.kt)("inlineCode",{parentName:"p"},"default")," namespace:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'$ kwctl run -e opa --request-path data/default-ns.json policy.wasm | jq\n{\n  "uid": "1299d386-525b-4032-98ae-1949f69f9cfc",\n  "allowed": false,\n  "status": {\n    "message": "it is forbidden to use the default namespace"\n  }\n}\n')),(0,l.kt)("p",null,"In this case, the policy is rejecting the request, and giving a reason\nback to the API server that will be returned to the user or API consumer."))}m.isMDXComponent=!0}}]);