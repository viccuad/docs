"use strict";(self.webpackChunkkubewarden_docusaurus=self.webpackChunkkubewarden_docusaurus||[]).push([[8905],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),l=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=l(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,y=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?i.createElement(y,r(r({ref:t},p),{},{components:n})):i.createElement(y,r({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:a,r[1]=c;for(var l=2;l<o;l++)r[l]=n[l];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},50862:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var i=n(87462),a=(n(67294),n(3905));const o={sidebar_label:"Policy metadata",title:"Policy metadata",description:"Using policy metadata when developing a Kubewarden policy.",keywords:["kubewraden","kubernetes policy development","policy metadata"],"doc-type":["how-to","tutorial"],"doc-topic":["kubewarden","writing-polices","policy-metadata"],"doc-persona":["kubewarden-developer"]},r=void 0,c={unversionedId:"writing-policies/metadata",id:"writing-policies/metadata",title:"Policy metadata",description:"Using policy metadata when developing a Kubewarden policy.",source:"@site/docs/writing-policies/metadata.md",sourceDirName:"writing-policies",slug:"/writing-policies/metadata",permalink:"/next/writing-policies/metadata",draft:!1,editUrl:"https://github.com/kubewarden/docs/edit/main/docs/writing-policies/metadata.md",tags:[],version:"current",lastUpdatedAt:1701174300,formattedLastUpdatedAt:"Nov 28, 2023",frontMatter:{sidebar_label:"Policy metadata",title:"Policy metadata",description:"Using policy metadata when developing a Kubewarden policy.",keywords:["kubewraden","kubernetes policy development","policy metadata"],"doc-type":["how-to","tutorial"],"doc-topic":["kubewarden","writing-polices","policy-metadata"],"doc-persona":["kubewarden-developer"]},sidebar:"docs",previous:{title:"Raw policies",permalink:"/next/writing-policies/wasi/raw-policies"},next:{title:"Policy testing",permalink:"/next/testing-policies/intro"}},s={},l=[{value:"Enabling background audit checks",id:"enabling-background-audit-checks",level:2},{value:"Defining Kubernetes resources that policies can access",id:"defining-kubernetes-resources-that-policies-can-access",level:2},{value:"Specifying policies as mutating or non-mutating",id:"specifying-policies-as-mutating-or-non-mutating",level:2},{value:"Specify policy type as Kubernetes or Raw",id:"specify-policy-type-as-kubernetes-or-raw",level:2},{value:"Defining resource type targets",id:"defining-resource-type-targets",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The Kubewarden metadata file, ",(0,a.kt)("inlineCode",{parentName:"p"},"metadata.yaml"),",\nis a configuration file containing important information and settings\nrelated to the policies used within Kubewarden.\nThis documentation is overview of the purpose and usage of the metadata file."),(0,a.kt)("p",null,"The policy ",(0,a.kt)("inlineCode",{parentName:"p"},"metadata.yaml")," file has defaults for the policy,\nas well as metadata such as author and description,\nset by the policy author.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"kwctl annotate")," command uses the file to annotate the ",(0,a.kt)("inlineCode",{parentName:"p"},".wasm")," file containing the policy.\nTherefore, all the relevant information required to run the policy is available.\nMore information about how to annotate the policy is in the\n",(0,a.kt)("a",{parentName:"p",href:"/next/distributing-policies"},"Distributing Policies")," guide."),(0,a.kt)("p",null,"When policy users want to use a policy, they generate a YAML manifest using ",(0,a.kt)("inlineCode",{parentName:"p"},"kwctl scaffold"),".\nThis command reads the policy metadata embedded in the shipped Wasm module,\nperforms checks, and returns a YAML manifest that the author can use as-is or modify."),(0,a.kt)("p",null,"As a policy author, you can adapt the ",(0,a.kt)("inlineCode",{parentName:"p"},"metadata.yaml")," file provided during the\nscaffolding of your policy."),(0,a.kt)("p",null,"See the following example of a ",(0,a.kt)("inlineCode",{parentName:"p"},"metadata.yaml"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'rules:\n  - apiGroups: [""]\n    apiVersions: ["v1"]\n    resources: ["pods"]\n    operations: ["CREATE"]\nmutating: false\ncontextAwareResources: []\nexecutionMode: kubewarden-wapc\npolicyType: kubernetes\nbackgroundAudit: true\nannotations:\n  # artifacthub specific:\n  io.artifacthub.displayName: Policy Name\n  io.artifacthub.resources: Pod\n  io.artifacthub.keywords: pod, cool policy, kubewarden\n  io.kubewarden.policy.ociUrl: ghcr.io/myorg/my-policy\n  # kubewarden specific:\n  io.kubewarden.policy.title: My policy\n  io.kubewarden.policy.description: Short description\n  io.kubewarden.policy.author: myself\n  io.kubewarden.policy.url: https://github.com/yourorg/my-policy\n  io.kubewarden.policy.source: https://github.com/yourorg/my-policy\n  io.kubewarden.policy.license: Apache-2.0\n  # The next two annotations are used in the policy report generated by the\n  # Audit scanner. Severity indicates policy check result criticality and\n  # Category indicates policy category. See more here at docs.kubewarden.io\n  io.kubewarden.policy.severity: medium\n  io.kubewarden.policy.category: Resource validation\n')),(0,a.kt)("h2",{id:"enabling-background-audit-checks"},"Enabling background audit checks"),(0,a.kt)("p",null,"The metadata file includes a flag, ",(0,a.kt)("inlineCode",{parentName:"p"},"backgroundAudit"),",\nthat enables the background audit checks for a specific policy.\nBy default, this flag is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("p",null,"There are policies that, due to the way they work or to the type of events they're concerned with,\nshould have this field set to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),".\nYou can find more information in the\n",(0,a.kt)("a",{parentName:"p",href:"../explanations/audit-scanner#limitations"},"audit scanner documentation"),",\nunder the limitations section."),(0,a.kt)("h2",{id:"defining-kubernetes-resources-that-policies-can-access"},"Defining Kubernetes resources that policies can access"),(0,a.kt)("p",null,"Within the metadata file,\nusing the ",(0,a.kt)("inlineCode",{parentName:"p"},"contextAwareResources")," field,\nusers can define which Kubernetes resources the policy can access.\nFor example, if the policy needs access to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Namespace")," resource.\nThe policy author can define the ",(0,a.kt)("inlineCode",{parentName:"p"},"contextAwareResources")," as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"[...]\ncontextAwareResources:\n  - apiVersion: v1 kind: Namespace\n[...]\n")),(0,a.kt)("h2",{id:"specifying-policies-as-mutating-or-non-mutating"},"Specifying policies as mutating or non-mutating"),(0,a.kt)("p",null,"The metadata file has a flag, ",(0,a.kt)("inlineCode",{parentName:"p"},"mutating"),",\nthat lets users configure a policy as either mutating or non-mutating.\nA mutating policy modifies the incoming requests or the resources being managed.\nA non-mutating policy observes and enforces restrictions without making any changes.\nThis distinction is crucial in determining how policies interact with the Kubernetes resources and their impact on the cluster."),(0,a.kt)("h2",{id:"specify-policy-type-as-kubernetes-or-raw"},"Specify policy type as Kubernetes or Raw"),(0,a.kt)("p",null,"The metadata file has a flag, ",(0,a.kt)("inlineCode",{parentName:"p"},"policyType"),", that lets users to mark a policy as either ",(0,a.kt)("inlineCode",{parentName:"p"},"kubernetes")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"raw"),".\nA Kubernetes policy is a policy that validates Kubernetes resources.\nA Raw policy is a policy that validates arbitrary JSON documents.\nBy default, if not specified by the user, this field is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"kubernetes")," when annotating a policy.\nRefer to the ",(0,a.kt)("a",{parentName:"p",href:"/next/howtos/raw-policies"},"Raw Policies")," section for more information."),(0,a.kt)("h2",{id:"defining-resource-type-targets"},"Defining resource type targets"),(0,a.kt)("p",null,"The metadata file provides users with the ability to define the rules within the ",(0,a.kt)("inlineCode",{parentName:"p"},"rules")," field,\nwhich determines the resource types to which the policy applies.\nThis feature empowers users to exercise precise control over policy enforcement,\nguaranteeing that policies are only applied to the intended resource types.\nWith this fine-grained control, users can guarantee that policies are targeted accurately,\naligning with their specific requirements and avoiding any unintended application of policies to unrelated resource types."))}d.isMDXComponent=!0}}]);