"use strict";(self.webpackChunkkubewarden_docusaurus=self.webpackChunkkubewarden_docusaurus||[]).push([[2973],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var i=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,s=function(e,t){if(null==e)return{};var n,i,s={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),g=s,f=p["".concat(l,".").concat(g)]||p[g]||d[g]||r;return n?i.createElement(f,a(a({ref:t},u),{},{components:n})):i.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,a=new Array(r);a[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:s,a[1]=o;for(var c=2;c<r;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3893:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=n(87462),s=(n(67294),n(3905));const r={sidebar_label:"Defining policy settings",title:"Defining policy settings",description:"Defining policy settings for a Kubewarden policy developed using Rust",keywords:["kubewarden","kubernetes","writing policies","policy settings","rust"],"doc-type":["tutorial"],"doc-topic":["kubewarden","writing-policies","rust","policy-settings"],"doc-persona":["kubewarden-developer","kubewarden-developer-rust"]},a=void 0,o={unversionedId:"writing-policies/rust/define-policy-settings",id:"writing-policies/rust/define-policy-settings",title:"Defining policy settings",description:"Defining policy settings for a Kubewarden policy developed using Rust",source:"@site/docs/writing-policies/rust/03-define-policy-settings.md",sourceDirName:"writing-policies/rust",slug:"/writing-policies/rust/define-policy-settings",permalink:"/next/writing-policies/rust/define-policy-settings",draft:!1,editUrl:"https://github.com/kubewarden/docs/edit/main/docs/writing-policies/rust/03-define-policy-settings.md",tags:[],version:"current",lastUpdatedAt:1701174300,formattedLastUpdatedAt:"Nov 28, 2023",sidebarPosition:3,frontMatter:{sidebar_label:"Defining policy settings",title:"Defining policy settings",description:"Defining policy settings for a Kubewarden policy developed using Rust",keywords:["kubewarden","kubernetes","writing policies","policy settings","rust"],"doc-type":["tutorial"],"doc-topic":["kubewarden","writing-policies","rust","policy-settings"],"doc-persona":["kubewarden-developer","kubewarden-developer-rust"]},sidebar:"docs",previous:{title:"Creating a policy",permalink:"/next/writing-policies/rust/create-policy"},next:{title:"Writing validation logic",permalink:"/next/writing-policies/rust/write-validation-logic"}},l={},c=[{value:"The policy settings structure",id:"the-policy-settings-structure",level:2},{value:"The settings validation function",id:"the-settings-validation-function",level:2},{value:"Add unit tests",id:"add-unit-tests",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(p,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"the-policy-settings-structure"},"The policy settings structure"),(0,s.kt)("p",null,"Firstly, define the structure that holds the policy settings."),(0,s.kt)("p",null,"Open the ",(0,s.kt)("inlineCode",{parentName:"p"},"demo/src/settings.rs")," file and change the definition of the ",(0,s.kt)("inlineCode",{parentName:"p"},"Settings"),"\n",(0,s.kt)("inlineCode",{parentName:"p"},"struct")," to look like:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub(crate) struct Settings {\n    pub invalid_names: HashSet<String>,\n}\n")),(0,s.kt)("p",null,"This automatically puts the list of invalid names in a Set collection."),(0,s.kt)("h2",{id:"the-settings-validation-function"},"The settings validation function"),(0,s.kt)("p",null,"Next, write a settings validation function to make sure the policy is always run with at least one invalid name."),(0,s.kt)("p",null,"You do this by changing the implementation of the ",(0,s.kt)("inlineCode",{parentName:"p"},"Validatable")," trait."),(0,s.kt)("p",null,"Change the scaffolding implementation defined in ",(0,s.kt)("inlineCode",{parentName:"p"},"src/settings.rs")," to look like:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'impl kubewarden::settings::Validatable for Settings {\n    fn validate(&self) -> Result<(), String> {\n        if self.invalid_names.is_empty() {\n            Err(String::from("No invalid name specified. Specify at least one invalid name to match"))\n        } else {\n            Ok(())\n        }\n    }\n}\n')),(0,s.kt)("h2",{id:"add-unit-tests"},"Add unit tests"),(0,s.kt)("p",null,"Now you can write a unit test to make sure the settings validation is working.\nYou can do this in the ",(0,s.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/stable/book/ch11-00-testing.html"},"usual Rust way"),"."),(0,s.kt)("p",null,"There are already a few default tests at the bottom of the ",(0,s.kt)("inlineCode",{parentName:"p"},"src/settings.rs"),"\nfile. Replace the automatically generated code to look like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'#[cfg(test)]\nmod tests {\n    use super::*;\n\n    use kubewarden_policy_sdk::settings::Validatable;\n\n    #[test]\n    fn accept_settings_with_a_list_of_invalid_names() -> Result<(), ()> {\n        let mut invalid_names = HashSet::new();\n        invalid_names.insert(String::from("bad_name1"));\n        invalid_names.insert(String::from("bad_name2"));\n\n        let settings = Settings { invalid_names };\n\n        assert!(settings.validate().is_ok());\n        Ok(())\n    }\n\n    #[test]\n    fn reject_settings_without_a_list_of_invalid_names() -> Result<(), ()> {\n        let invalid_names = HashSet::<String>::new();\n        let settings = Settings { invalid_names };\n\n        assert!(settings.validate().is_err());\n        Ok(())\n    }\n}\n')),(0,s.kt)("p",null,"You can now run the unit tests by doing:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-console"},"cargo test\n")),(0,s.kt)("p",null,"This produces an output similar to the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-console"},"   Compiling demo v0.1.0 (/home/jhk/projects/suse/tmp/demo)\n    Finished test [unoptimized + debuginfo] target(s) in 0.59s\n     Running unittests src/lib.rs (target/debug/deps/demo-bea8e11b21717093)\n\nrunning 5 tests\ntest settings::tests::accept_settings_with_a_list_of_invalid_names ... ok\ntest settings::tests::reject_settings_without_a_list_of_invalid_names ... ok\ntest tests::reject_pod_with_invalid_name ... ok\ntest tests::accept_request_with_non_pod_resource ... ok\ntest tests::accept_pod_with_valid_name ... ok\n\ntest result: ok. 5 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n")))}d.isMDXComponent=!0}}]);