"use strict";(self.webpackChunkkubewarden_docusaurus=self.webpackChunkkubewarden_docusaurus||[]).push([[827],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>m});var n=i(67294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var u=n.createContext({}),s=function(e){var t=n.useContext(u),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},d=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(i),b=r,m=p["".concat(u,".").concat(b)]||p[b]||c[b]||o;return i?n.createElement(m,a(a({ref:t},d),{},{components:i})):n.createElement(m,a({ref:t},d))}));function m(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=b;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var s=2;s<o;s++)a[s]=i[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}b.displayName="MDXCreateElement"},75128:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=i(87462),r=(i(67294),i(3905));const o={sidebar_label:"Building and distributing policies",title:"Building and distributing policies",description:"Building and distributing Kubewarden policies developed with Rust.",keywords:["kubewarden","kubernetes","writing policies","rust","build and distribute"],"doc-type":["tutorial"],"doc-topic":["kubewarden","writing-policies","rust","build-and-distribute"],"doc-persona":["kubewarden-developer","kubewarden-developer-rust","kubewarden-operator"]},a=void 0,l={unversionedId:"writing-policies/rust/build-and-distribute",id:"writing-policies/rust/build-and-distribute",title:"Building and distributing policies",description:"Building and distributing Kubewarden policies developed with Rust.",source:"@site/docs/writing-policies/rust/07-build-and-distribute.md",sourceDirName:"writing-policies/rust",slug:"/writing-policies/rust/build-and-distribute",permalink:"/next/writing-policies/rust/build-and-distribute",draft:!1,editUrl:"https://github.com/kubewarden/docs/edit/main/docs/writing-policies/rust/07-build-and-distribute.md",tags:[],version:"current",lastUpdatedAt:1701174300,formattedLastUpdatedAt:"Nov 28, 2023",sidebarPosition:7,frontMatter:{sidebar_label:"Building and distributing policies",title:"Building and distributing policies",description:"Building and distributing Kubewarden policies developed with Rust.",keywords:["kubewarden","kubernetes","writing policies","rust","build and distribute"],"doc-type":["tutorial"],"doc-topic":["kubewarden","writing-policies","rust","build-and-distribute"],"doc-persona":["kubewarden-developer","kubewarden-developer-rust","kubewarden-operator"]},sidebar:"docs",previous:{title:"Logging",permalink:"/next/writing-policies/rust/logging"},next:{title:"Raw policies",permalink:"/next/writing-policies/rust/raw-policies"}},u={},s=[{value:"Building the policy",id:"building-the-policy",level:2},{value:"Distributing the policy",id:"distributing-the-policy",level:2},{value:"More examples",id:"more-examples",level:2}],d={toc:s},p="wrapper";function c(e){let{components:t,...i}=e;return(0,r.kt)(p,(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"building-the-policy"},"Building the policy"),(0,r.kt)("p",null,"Thus far, you've built the policy with a compilation target of the same operating system and architecture of your development machine."),(0,r.kt)("p",null,"It's now time to build the policy as a WebAssembly binary, a ",(0,r.kt)("inlineCode",{parentName:"p"},".wasm")," file."),(0,r.kt)("p",null,"You use the command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"make policy.wasm\n")),(0,r.kt)("p",null,"This command builds the code in release mode, with a WebAssembly compilation target."),(0,r.kt)("p",null,"The build produces a ",(0,r.kt)("inlineCode",{parentName:"p"},"policy.wasm")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ file policy.wasm\npolicy.wasm: WebAssembly (wasm) binary module version 0x1 (MVP)\n")),(0,r.kt)("h2",{id:"distributing-the-policy"},"Distributing the policy"),(0,r.kt)("p",null,"Kubewarden documents policy distribution in the\n",(0,r.kt)("a",{parentName:"p",href:"/next/distributing-policies"},"distributing policies"),"\nsection."),(0,r.kt)("h2",{id:"more-examples"},"More examples"),(0,r.kt)("p",null,"You can find more Rust Kubewarden policies in Kubewarden's GitHub space.\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/search?l=Rust&q=topic%3Apolicy-as-code+org%3Akubewarden&type=Repositories"},"This query"),"\ncan help you find them."),(0,r.kt)("p",null,"The Kubewarden policy repositories, shown by that query, have GitHub Actions that automate the following tasks:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Run unit tests and code linting on pull requests and after code merges into the main branch."),(0,r.kt)("li",{parentName:"ul"},"Build the policy in ",(0,r.kt)("inlineCode",{parentName:"li"},"release")," mode and push it to an OCI registry as an artifact.")))}c.isMDXComponent=!0}}]);